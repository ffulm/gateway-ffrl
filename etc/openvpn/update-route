#!/bin/bash
#script called by OpenVPN to setup routes

vpn_interface="$dev"
vpn_gateway_v4="$route_vpn_gateway"
vpn_gateway_v6="$route_ipv6_gateway_1"
mesh_interface="bat0"

set -x
exec >/var/log/update-route.log 2>&1
date

echo "(I) vpn_interface: '$vpn_interface'"
echo "(I) vpn_gateway (v6): '$vpn_gateway_v6'"
echo "(I) vpn_gateway (v4): '$vpn_gateway_v4'"
echo "(I) mesh_interface: '$mesh_interface'"

#make sure the rule is only applied once
iptables_a() {
	iptables -C $@ || iptables -A $@
}

ip6tables_a() {
	ip6tables -C $@ || ip6tables -A $@
}

# create table shortcut if it does not exist yet
ip route show table vpn &> /dev/null || echo 100 vpn >> /etc/iproute2/rt_tables
ip route show table icvpn &> /dev/null || echo 200 icvpn >> /etc/iproute2/rt_tables
ip route show table dns &> /dev/null || echo 300 dns >> /etc/iproute2/rt_tables

# delete rules (v4)
ip rule del table vpn &> /dev/null   #bat0
ip rule del table vpn &> /dev/null   #nat64
ip rule del table icvpn &> /dev/null
ip rule del table dns &> /dev/null

# flush routes
ip route flush table vpn
ip route flush table dns

# add priority rules (v4)
ip rule add dev nat64 table vpn prio 32565
ip rule add dev "$mesh_interface" table vpn prio 32564
ip rule add from all lookup icvpn prio 32563
ip rule add from all lookup dns prio 32562

# set default route to vpn tunnel
ip route add default via "$vpn_gateway_v4" dev "$vpn_interface" table vpn

# route dns requests to vpn tunnel before doing icvpn-routing
ip route add "$vpn_gateway_v4"/32 via "$vpn_gateway_v4" dev "$vpn_interface" table dns

# setup table vpn (v6)
ip -6 rule del table vpn &> /dev/null
ip -6 route flush table vpn
#ip -6 route add fe80::/64 dev "$vpn_interface" table vpn
ip -6 route add "$vpn_gateway_v6/64" dev "$vpn_interface" table vpn
ip -6 route add 2000::/3 dev "$vpn_interface" table vpn
ip -6 rule add dev "$mesh_interface" table vpn prio 32565

#
iptables_a INPUT -i "$vpn_interface" -j ACCEPT
iptables_a POSTROUTING --table nat -o "$vpn_interface" -j MASQUERADE
iptables_a FORWARD -i "$mesh_interface" -o "$vpn_interface" -j ACCEPT
iptables_a FORWARD -i "$vpn_interface" -j ACCEPT

# forward traffic between freifunk and the VPN (if the connection originated in freifunk)
ip6tables_a FORWARD -i "$vpn_interface" -o "$mesh_interface" -m state --state ESTABLISHED,RELATED -j ACCEPT
ip6tables_a FORWARD -i "$mesh_interface" -o "$vpn_interface" -j ACCEPT
iptables_a FORWARD -i "$vpn_interface" -o nat64 -m state --state RELATED,ESTABLISHED -j ACCEPT
iptables_a FORWARD -i "$mesh_interface" -o "$vpn_interface" -j ACCEPT

# allow DNS queries through the VPN
ip6tables_a INPUT -i "$vpn_interface" -p tcp -m tcp --dport domain -m state --state ESTABLISHED -j ACCEPT
ip6tables_a INPUT -i "$vpn_interface" -p udp -m udp --dport domain -m state --state ESTABLISHED -j ACCEPT
iptables_a INPUT -i "$vpn_interface" -p tcp -m tcp --dport domain -m state --state ESTABLISHED -j ACCEPT
iptables_a INPUT -i "$vpn_interface" -p udp -m udp --dport domain -m state --state ESTABLISHED -j ACCEPT

# resolve NAT64 through the VPN
iptables_a FORWARD -i nat64 -o "$vpn_interface" -j ACCEPT
iptables_a FORWARD -i "$vpn_interface" -o nat64 -m state --state ESTABLISHED,RELATED -j ACCEPT

# NAT66 all freifunk traffic
ip6tables_a POSTROUTING --table nat -o "$vpn_interface" -j MASQUERADE
iptables_a POSTROUTING --table nat -s 10.33.0.0/16 -j MASQUERADE

# Enable MSS clamping
iptables_a FORWARD -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu

# Enable routing
echo 1 > /proc/sys/net/ipv6/conf/default/forwarding
echo 1 > /proc/sys/net/ipv6/conf/all/forwarding
echo 1 > /proc/sys/net/ipv4/conf/default/forwarding
echo 1 > /proc/sys/net/ipv4/conf/all/forwarding
echo 1 > /proc/sys/net/ipv4/ip_forward
